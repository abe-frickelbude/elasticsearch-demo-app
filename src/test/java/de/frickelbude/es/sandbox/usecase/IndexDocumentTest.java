package de.frickelbude.es.sandbox.usecase;

import static org.junit.Assert.*;
import org.elasticsearch.action.*;
import org.elasticsearch.action.DocWriteResponse.*;
import org.elasticsearch.action.index.*;
import org.elasticsearch.client.*;
import org.junit.*;
import org.junit.runners.*;
import org.slf4j.*;
import org.springframework.beans.factory.annotation.*;
import de.frickelbude.es.sandbox.base.*;
import de.frickelbude.es.sandbox.common.*;
import de.frickelbude.es.sandbox.entity.*;
import de.frickelbude.es.sandbox.rules.*;
import de.frickelbude.es.sandbox.service.generator.*;
import de.frickelbude.es.sandbox.service.io.*;

/**
 * The following are basic tests for the use case "index a document" using the ES java client API.
 * 
 * <p>
 * The breakdown is as follows:
 * </p>
 * 
 * <ul>
 * <li>Although the official ES API documentation (I'm referring to <a
 * href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/index_.html">here</a>) doesn't state it
 * explicitly, in the most basic form indexing a document <strong>requires</strong> the "index name" and "type" parameters,
 * whereas the document ID is optional, and will be auto-generated if it is not provided. This is more clear from the Javadoc
 * of e.g. {@linkplain IndexRequest}, where the index name and type are clearly labeled as required.</li>
 * <li>Failure to provide either of the required parameters produces an exception, as outlined in the tests below.</li>
 * <li>Auto-generated IDs are <em>alphanumeric</em> strings and not integers!</li>
 * <li>The index API can also be used to update existing documents. The difference is in the returned
 * {@linkplain IndexResponse}: the isCreated() flag is set to <code>false</code>, as opposed to <code>true</code> when
 * creating an index entry for the first time.</li>
 * </ul>
 * 
 * @author Ibragim Kuliev
 *
 */
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class IndexDocumentTest extends BaseEsSandboxTest {

    @Log
    private static Logger log;

    @Rule
    public TimingWatcher testWatcher = new TimingWatcher();

    @Autowired
    private RandomComponentFactory componentFactory;

    @Autowired
    private ComponentJsonConverter converter;

    @Autowired
    private Client client;

    @Before
    public void clean() {
        cleanIndices();
    }

    @Test
    public void testIndexDocument() {

        Component component = componentFactory.makeComponent();
        String document = converter.toJson(component);

        IndexResponse response = client.prepareIndex(
            component.getCategory(),
            component.getType(),
            String.valueOf(component.getId())).
            setSource(document).
            execute().actionGet();
        assertNotNull(response);
        assertTrue(response.getResult() == Result.CREATED);
    }

    @Test
    public void testIndexDocumentNoId() {

        Component component = componentFactory.makeComponent();
        String document = converter.toJson(component);

        IndexResponse response = client.prepareIndex(
            component.getCategory(),
            component.getType()).
            setSource(document).
            execute().actionGet();

        assertNotNull(response);
        assertTrue(response.getResult() == Result.CREATED);
        assertNotNull(response.getId());
        log.info("Autogenerated id: {}", response.getId());
    }

    /*
     * These tests are supposed to fail and thereby show that the omission of index name or type will result
     * in failures.
     */

    @Test(expected = ActionRequestValidationException.class)
    public void testIndexDocumentNoIndexName() {

        Component component = componentFactory.makeComponent();
        String document = converter.toJson(component);

        IndexRequestBuilder builder = new IndexRequestBuilder(client, IndexAction.INSTANCE);
        builder.setId(String.valueOf(component.getId()));
        builder.setSource(document);
        builder.execute().actionGet();
    }

    @Test(expected = ActionRequestValidationException.class)
    public void testIndexDocumentNoType() {

        Component component = componentFactory.makeComponent();
        String document = converter.toJson(component);

        IndexRequestBuilder builder = new IndexRequestBuilder(client, IndexAction.INSTANCE);
        builder.setId(String.valueOf(component.getId()));
        builder.setIndex(component.getCategory());
        builder.setSource(document);
        builder.execute().actionGet();
    }

    @Test
    public void testUpdateDocument() {

        Component component = componentFactory.makeComponent();
        String document = converter.toJson(component);

        IndexResponse response = client.prepareIndex(
            component.getCategory(),
            component.getType(),
            String.valueOf(component.getId())).
            setSource(document).
            execute().actionGet();

        assertNotNull(response);
        assertTrue(response.getResult() == Result.CREATED);
        log.info("Initial version: {}", response.getVersion());

        component.setDescription("Updated description");
        document = converter.toJson(component);

        response = client.prepareIndex(
            component.getCategory(),
            component.getType(),
            String.valueOf(component.getId())).
            setSource(document).
            execute().actionGet();

        assertNotNull(response);
        assertFalse(response.getResult() == Result.CREATED);
        log.info("Updated version: {}", response.getVersion());
    }
}
